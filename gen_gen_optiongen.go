// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package gcache

import (
	"bitbucket.org/funplus/gcache/cache"
	"time"
)

type Options struct {
	Shards               int32
	Expiration           time.Duration
	EvictStrategy        cache.EVICT_STRATEGY
	CleanInterval        time.Duration
	MaxEntrySize         uint32
	Hasher               Hasher
	OnRemoveCallbackFunc cache.EvictCallback
	Development          bool
	Logger               Logger
}

func (cc *Options) SetOption(opt Option) {
	_ = opt(cc)
}

func (cc *Options) ApplyOption(opts ...Option) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

func (cc *Options) GetSetOption(opt Option) Option {
	return opt(cc)
}

type Option func(cc *Options) Option

func WithShards(v int32) Option {
	return func(cc *Options) Option {
		previous := cc.Shards
		cc.Shards = v
		return WithShards(previous)
	}
}
func WithExpiration(v time.Duration) Option {
	return func(cc *Options) Option {
		previous := cc.Expiration
		cc.Expiration = v
		return WithExpiration(previous)
	}
}
func WithEvictStrategy(v cache.EVICT_STRATEGY) Option {
	return func(cc *Options) Option {
		previous := cc.EvictStrategy
		cc.EvictStrategy = v
		return WithEvictStrategy(previous)
	}
}
func WithCleanInterval(v time.Duration) Option {
	return func(cc *Options) Option {
		previous := cc.CleanInterval
		cc.CleanInterval = v
		return WithCleanInterval(previous)
	}
}
func WithMaxEntrySize(v uint32) Option {
	return func(cc *Options) Option {
		previous := cc.MaxEntrySize
		cc.MaxEntrySize = v
		return WithMaxEntrySize(previous)
	}
}
func WithHasher(v Hasher) Option {
	return func(cc *Options) Option {
		previous := cc.Hasher
		cc.Hasher = v
		return WithHasher(previous)
	}
}
func WithOnRemoveCallbackFunc(v cache.EvictCallback) Option {
	return func(cc *Options) Option {
		previous := cc.OnRemoveCallbackFunc
		cc.OnRemoveCallbackFunc = v
		return WithOnRemoveCallbackFunc(previous)
	}
}
func WithDevelopment(v bool) Option {
	return func(cc *Options) Option {
		previous := cc.Development
		cc.Development = v
		return WithDevelopment(previous)
	}
}
func WithLogger(v Logger) Option {
	return func(cc *Options) Option {
		previous := cc.Logger
		cc.Logger = v
		return WithLogger(previous)
	}
}

func NewOptions(opts ...Option) *Options {
	cc := newDefaultOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogOptions != nil {
		watchDogOptions(cc)
	}
	return cc
}

func InstallOptionsWatchDog(dog func(cc *Options)) {
	watchDogOptions = dog
}

var watchDogOptions func(cc *Options)

func newDefaultOptions() *Options {

	cc := &Options{}

	for _, opt := range [...]Option{
		WithShards(1024),
		WithExpiration(DefaultExpiration),
		WithEvictStrategy(default_evict_strategy),
		WithCleanInterval(30 * time.Second),
		WithMaxEntrySize(1024 * 1024),
		WithHasher(newDefaultHasher()),
		WithOnRemoveCallbackFunc(nil),
		WithDevelopment(true),
		WithLogger(nil),
	} {
		_ = opt(cc)
	}

	return cc
}
